From 3dbc51f68200983c5c0b5cbdc63d04daa7ec1888 Mon Sep 17 00:00:00 2001
From: "Munoz, Obed N" <obed.n.munoz@intel.com>
Date: Wed, 30 Sep 2015 12:48:26 -0500
Subject: [PATCH] Add OSProfiler support

Signed-off-by: Munoz, Obed N <obed.n.munoz@intel.com>
---
 etc/nova/api-paste.ini           | 15 ++++++++++-----
 nova/db/sqlalchemy/api.py        |  6 ++++++
 nova/rpc.py                      | 15 ++++++++++++++-
 nova/service.py                  | 28 ++++++++++++++++++++++++++++
 nova/test.py                     |  1 +
 nova/tests/unit/fake_notifier.py |  5 ++++-
 requirements.txt                 |  1 +
 7 files changed, 64 insertions(+), 7 deletions(-)

diff --git a/etc/nova/api-paste.ini b/etc/nova/api-paste.ini
index cb5ea67..ce935b5 100644
--- a/etc/nova/api-paste.ini
+++ b/etc/nova/api-paste.ini
@@ -82,9 +82,9 @@ use = call:nova.api.openstack.urlmap:urlmap_factory
 # NOTE: this is deprecated in favor of openstack_compute_api_v21_legacy_v2_compatible
 [composite:openstack_compute_api_legacy_v2]
 use = call:nova.api.auth:pipeline_factory
-noauth2 = compute_req_id faultwrap sizelimit noauth2 legacy_ratelimit osapi_compute_app_legacy_v2
-keystone = compute_req_id faultwrap sizelimit authtoken keystonecontext legacy_ratelimit osapi_compute_app_legacy_v2
-keystone_nolimit = compute_req_id faultwrap sizelimit authtoken keystonecontext osapi_compute_app_legacy_v2
+noauth2 = compute_req_id faultwrap sizelimit osprofiler noauth2 legacy_ratelimit osapi_compute_app_legacy_v2
+keystone = compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext legacy_ratelimit osapi_compute_app_legacy_v2
+keystone_nolimit = compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext osapi_compute_app_legacy_v2
 
 [composite:openstack_compute_api_v21]
 use = call:nova.api.auth:pipeline_factory_v21
@@ -93,8 +93,8 @@ keystone = compute_req_id faultwrap sizelimit authtoken keystonecontext osapi_co
 
 [composite:openstack_compute_api_v21_legacy_v2_compatible]
 use = call:nova.api.auth:pipeline_factory_v21
-noauth2 = compute_req_id faultwrap sizelimit noauth2 legacy_v2_compatible osapi_compute_app_v21
-keystone = compute_req_id faultwrap sizelimit authtoken keystonecontext legacy_v2_compatible osapi_compute_app_v21
+noauth2 = compute_req_id faultwrap sizelimit osprofiler noauth2 legacy_v2_compatible osapi_compute_app_v21
+keystone = compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext legacy_v2_compatible osapi_compute_app_v21
 
 [filter:request_id]
 paste.filter_factory = oslo_middleware:RequestId.factory
@@ -105,6 +105,11 @@ paste.filter_factory = nova.api.compute_req_id:ComputeReqIdMiddleware.factory
 [filter:faultwrap]
 paste.filter_factory = nova.api.openstack:FaultWrapper.factory
 
+[filter:osprofiler]
+paste.filter_factory = osprofiler.web:WsgiMiddleware.factory
+hmac_keys = SECRET_KEY
+enabled = yes
+
 [filter:noauth2]
 paste.filter_factory = nova.api.openstack.auth:NoAuthMiddleware.factory
 
diff --git a/nova/db/sqlalchemy/api.py b/nova/db/sqlalchemy/api.py
index ac9e652..6b3e2fa 100644
--- a/nova/db/sqlalchemy/api.py
+++ b/nova/db/sqlalchemy/api.py
@@ -36,8 +36,10 @@ from oslo_log import log as logging
 from oslo_utils import excutils
 from oslo_utils import timeutils
 from oslo_utils import uuidutils
+import osprofiler.sqlalchemy
 import six
 from six.moves import range
+import sqlalchemy
 from sqlalchemy import and_
 from sqlalchemy.exc import NoSuchTableError
 from sqlalchemy import MetaData
@@ -126,6 +128,7 @@ CONF = cfg.CONF
 CONF.register_opts(db_opts)
 CONF.register_opts(oslo_db_options.database_opts, 'database')
 CONF.register_opts(api_db_opts, group='api_database')
+CONF.import_group("profiler", "nova.service")
 
 LOG = logging.getLogger(__name__)
 
@@ -162,6 +165,9 @@ def _create_facade_lazily(facade, conf_group):
         with _LOCK:
             if _ENGINE_FACADE[facade] is None:
                 _ENGINE_FACADE[facade] = _create_facade(conf_group)
+    if CONF.profiler.enabled and CONF.profiler.trace_sqlalchemy:
+        osprofiler.sqlalchemy.add_tracing(sqlalchemy,
+                                          _ENGINE_FACADE[facade].get_engine(), "db")
     return _ENGINE_FACADE[facade]
 
 
diff --git a/nova/rpc.py b/nova/rpc.py
index 14a6962..c7d59f9 100644
--- a/nova/rpc.py
+++ b/nova/rpc.py
@@ -29,6 +29,7 @@ __all__ = [
 from oslo_config import cfg
 import oslo_messaging as messaging
 from oslo_serialization import jsonutils
+from osprofiler import profiler
 
 import nova.context
 import nova.exception
@@ -111,9 +112,21 @@ class RequestContextSerializer(messaging.Serializer):
         return self._base.deserialize_entity(context, entity)
 
     def serialize_context(self, context):
-        return context.to_dict()
+        _context = context.to_dict()
+        prof = profiler.get()
+        if prof:
+            trace_info = {
+                "hmac_key": prof.hmac_key,
+                "base_id": prof.get_base_id(),
+                "parent_id": prof.get_id()
+            }
+            _context.update({"trace_info": trace_info})
+        return _context
 
     def deserialize_context(self, context):
+        trace_info = context.pop("trace_info", None)
+        if trace_info:
+            profiler.init(**trace_info)
         return nova.context.RequestContext.from_dict(context)
 
 
diff --git a/nova/service.py b/nova/service.py
index a09187d..96d63f9 100644
--- a/nova/service.py
+++ b/nova/service.py
@@ -27,6 +27,8 @@ from oslo_log import log as logging
 import oslo_messaging as messaging
 from oslo_service import service
 from oslo_utils import importutils
+import osprofiler.notifier
+from osprofiler import profiler
 
 from nova import baserpc
 from nova import conductor
@@ -121,10 +123,33 @@ service_opts = [
                help='Maximum time since last check-in for up service'),
     ]
 
+profiler_opts = [
+    cfg.BoolOpt("enabled", default=False,
+                help=_('If False fully disable profiling feature.')),
+    cfg.BoolOpt("trace_sqlalchemy", default=False,
+                help=_("If False doesn't trace SQL requests."))
+    ]
+
 CONF = cfg.CONF
 CONF.register_opts(service_opts)
+CONF.register_opts(profiler_opts, group="profiler")
 CONF.import_opt('host', 'nova.netconf')
 
+def setup_profiler(binary, host):
+    if CONF.profiler.enabled:
+        _notifier = osprofiler.notifier.create(
+            "Messaging", messaging, context.get_admin_context().to_dict(),
+            rpc.TRANSPORT, "nova", binary, host)
+        osprofiler.notifier.set(_notifier)
+        LOG.warning(_("OSProfiler is enabled.\nIt means that person who knows "
+                      "any of hmac_keys that are specified in "
+                      "/etc/nova/api-paste.ini can trace his requests. \n"
+                      "In real life only operator can read this file so there "
+                      "is no security issue. Note that even if person can "
+                      "trigger profiler, only admin user can retrieve trace "
+                      "information.\n"
+                      "To disable OSprofiler set in nova.conf:\n"
+                      "[profiler]\nenabled=false"))
 
 class Service(service.Service):
     """Service object for binaries running on hosts.
@@ -145,6 +170,7 @@ class Service(service.Service):
         self.manager_class_name = manager
         self.servicegroup_api = servicegroup.API()
         manager_class = importutils.import_class(self.manager_class_name)
+        manager_class = profiler.trace_cls("rpc")(manager_class)
         self.manager = manager_class(host=self.host, *args, **kwargs)
         self.rpcserver = None
         self.report_interval = report_interval
@@ -155,6 +181,7 @@ class Service(service.Service):
         self.backdoor_port = None
         self.conductor_api = conductor.API(use_local=db_allowed)
         self.conductor_api.wait_until_ready(context.get_admin_context())
+        setup_profiler(binary, host)
 
     def start(self):
         verstr = version.version_string_with_package()
@@ -352,6 +379,7 @@ class WSGIService(service.Service):
         # Pull back actual port used
         self.port = self.server.port
         self.backdoor_port = None
+        setup_profiler(name, self.host)
 
     def reset(self):
         """Reset server greenpool size to default.
diff --git a/nova/test.py b/nova/test.py
index 049d444..b7a4bd3 100644
--- a/nova/test.py
+++ b/nova/test.py
@@ -235,6 +235,7 @@ class TestCase(testtools.TestCase):
         self.policy = self.useFixture(policy_fixture.PolicyFixture())
 
         self.useFixture(nova_fixtures.PoisonFunctions())
+        CONF.set_override('enabled', False, 'profiler')
 
     def _restore_obj_registry(self):
         objects_base.NovaObjectRegistry._registry._obj_classes = \
diff --git a/nova/tests/unit/fake_notifier.py b/nova/tests/unit/fake_notifier.py
index 4c599ad..da01486 100644
--- a/nova/tests/unit/fake_notifier.py
+++ b/nova/tests/unit/fake_notifier.py
@@ -34,7 +34,8 @@ FakeMessage = collections.namedtuple('Message',
 
 class FakeNotifier(object):
 
-    def __init__(self, transport, publisher_id, serializer=None):
+    def __init__(self, transport, publisher_id, serializer=None, driver=None,
+                 topic=None, retry=None):
         self.transport = transport
         self.publisher_id = publisher_id
         self._serializer = serializer or messaging.serializer.NoOpSerializer()
@@ -63,6 +64,8 @@ class FakeNotifier(object):
                           payload, ctxt)
         NOTIFICATIONS.append(msg)
 
+        def info(self, ctxt, event_type, payload):
+            self._notify("INFO", ctxt, event_type, payload)
 
 def stub_notifier(stubs):
     stubs.Set(messaging, 'Notifier', FakeNotifier)
diff --git a/requirements.txt b/requirements.txt
index 62bdcf8..e30d1d2 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -46,6 +46,7 @@ oslo.rootwrap>=2.0.0 # Apache-2.0
 oslo.messaging!=1.17.0,!=1.17.1,>=1.16.0 # Apache-2.0
 oslo.i18n>=1.5.0 # Apache-2.0
 oslo.service>=0.7.0 # Apache-2.0
+osprofiler>=0.3.0 # Apache-2.0
 rfc3986>=0.2.0 # Apache-2.0
 oslo.middleware>=2.8.0 # Apache-2.0
 psutil<2.0.0,>=1.1.1
-- 
2.6.0

